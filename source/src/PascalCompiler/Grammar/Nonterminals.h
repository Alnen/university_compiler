#ifndef NONTERMINALS_H
#define NONTERMINALS_H

#include <boost/container/flat_map.hpp>
#include <boost/bimap.hpp>
#include <string>
#include <vector>

namespace PascalCompiler {
namespace Grammar {

enum NonterminalSymbols
{
    NONTERMINAL_START_INDEX          = 99,
    AdditiveExpression,              // 100
    AssignmentOperator,              // 101
    BinaryAdditiveOperator,          // 102
    BinaryLogicOperatorAnd,          // 103
    BinaryLogicOperatorOr,           // 104
    BinaryMulOperator,               // 105
    BinaryNotAdditiveOperator,       // 106
    BinaryOperatorOverload,          // 107
    BinaryOperatorOverloadEnd,       // 108
    BinaryRelationOperator,          // 109
    BuiltInType,                     // 110
    ComplexNumberPart,               // 111
    ComplexNumberSuffix,             // 112
    CompoundStatement,               // 113
    CompoundStatementEnd,            // 114
    ConditionalOperator,             // 115
    ConditionalOperatorEnd,          // 116
    ConstDefinition,                 // 117
    ConstSection,                    // 118
    CreateBlock,                     // 119
    DefiniteType,                    // 120
    EmptyStatement,                  // 121
    EnumType,                        // 122
    ExprList,                        // 123
    ExprListTail,                    // 124
    Expression,                      // 125
    Factor,                          // 126
    FunctionCall,                    // 127
    FunctionDeclaration,             // 128
    FunctionParameters,              // 129
    FunctionParametersTail,          // 130
    GcdExpression,                   // 131
    GlobalDeclaration,               // 132
    IdList,                          // 133
    IdListTail,                      // 134
    Index,                           // 135
    InputOperator,                   // 136
    Label,                           // 137
    LabelOrAssignmentStatement,      // 138
    LabelSection,                    // 139
    LeftHandVar,                     // 140
    LocalDeclaration,                // 141
    LogicAnd,                        // 142
    LogicOr,                         // 143
    LoopDirection,                   // 144
    LoopWithParameterOperator,       // 145
    Massive,                         // 146
    MulExpression,                   // 147
    NextAdditiveExpression,          // 148
    NextConstDefinition,             // 149
    NextGcdExpression,               // 150
    NextIndex,                       // 151
    NextLabel,                       // 152
    NextLogicAnd,                    // 153
    NextLogicOr,                     // 154
    NextMulExpression,               // 155
    NextRecordFieldDefinition,       // 156
    NextRelationalExpression,        // 157
    NextTypeDefinition,              // 158
    NextVarDefinition,               // 159
    NotEmptyExprList,                // 160
    NotEmptyGlobalDeclaration,       // 161
    NotEmptyIdList,                  // 162
    NotEmptyLocalDeclaration,        // 163
    NotEmptyResultParameters,        // 164
    NotEmptyStatement,               // 165
    NumericConstant,                 // 166
    OneTypeParameters,               // 167
    OperatorOverloadSection,         // 168
    OutputOperator,                  // 169
    OverloadBinaryOperator,          // 170
    OverloadOperator,                // 171
    OverloadOperatorEnd,             // 172
    ProcedureDeclaration,            // 173
    ProcedureParameters,             // 174
    Program,                         // 175
    RationalComplexPart,             // 176
    RationalNumberPart,              // 177
    RecordFieldDefinition,           // 178
    RecordType,                      // 179
    RelationalExpression,            // 180
    ResultParameters,                // 181
    RightHandVar,                    // 182
    Statement,                       // 183
    StatementList,                   // 184
    Type,                            // 185
    TypeDefinition,                  // 186
    TypeSection,                     // 187
    UnaryAdditiveOperator,           // 188
    UnaryNotAdditiveOperator,        // 189
    UnaryOperator,                   // 190
    UnaryOperatorOverload,           // 191
    UnconditionalJumpOperator,       // 192
    UnsignedFactor,                  // 193
    VarDefinition,                   // 194
    VarHandlerList,                  // 195
    VarSection,                      // 196
    NONTERMINAL_FINISH_INDEX,        // 197
    ACTION_START_INDEX,              // 198
    ACTION1,                         // 199
    ACTION3,                         // 200
    AppendExprList,                  // 201
    AppendIdList,                    // 202
    AppendIndexVarHandlerList,       // 203
    AppendMemberVarHandlerList,      // 204
    ArrayCreationAction,             // 205
    AssignmentAction,                // 206
    BinaryLogicOperatorRWLA,         // 207
    BinaryLogicOperatorRWLO,         // 208
    BinaryRelationOperatorOPEQ,      // 209
    BinaryRelationOperatorOPGE,      // 210
    BinaryRelationOperatorOPGT,      // 211
    BinaryRelationOperatorOPLE,      // 212
    BinaryRelationOperatorOPLT,      // 213
    BinaryRelationOperatorOPNE,      // 214
    BracketValuePropagation,         // 215
    ComplexPass,                     // 216
    ConditionalOperatorAction,       // 217
    ConditionalOperatorElseAction,   // 218
    ConditionalOperatorNoElseAction, // 219
    CreateBlockAction,               // 220
    CreateConstComplex1,             // 221
    CreateConstComplex2,             // 222
    CreateConstComplex3,             // 223
    DEFAULT_INHERIT,                 // 224
    DEFAULT_SYNTHESIZE,              // 225
    EnumTypeConstruction,            // 226
    ExpressionCombiner,              // 227
    FinalAppendExprList,             // 228
    FinalAppendList,                 // 229
    FinishMainFuntion,               // 230
    GetTypeAccordingToID,            // 231
    GotoLabel,                       // 232
    IDPass,                          // 233
    IDPass2,                         // 234
    IndexListAppendAtStart,          // 235
    IndexListInit,                   // 236
    IndexTypeCXSize,                 // 237
    IndexTypeIDCase,                 // 238
    InitExprList,                    // 239
    InitIdList,                      // 240
    InitVarHandlerList,              // 241
    IntegerPass,                     // 242
    JFlagFalse,                      // 243
    JFlagTrue,                       // 244
    LabelAction,                     // 245
    LabelID,                         // 246
    LabelOrAssignmentAction,         // 247
    LabelRegistration,               // 248
    LabelStatement,                  // 249
    LoadRightHandVar,                // 250
    LoopDirectionDT,                 // 251
    LoopDirectionTO,                 // 252
    LoopWithParameterAction,         // 253
    OPPropagation,                   // 254
    PostfixRationalOperatorRWDNN,    // 255
    PrintOperatorMain,               // 256
    PrintOperatorRest,               // 257
    PropagateLeftHandVarInfo,        // 258
    RationalEnd,                     // 259
    RationalPass,                    // 260
    RationalStart,                   // 261
    ReadLeftHandVarAction,           // 262
    SuperExpressionCombiner,         // 263
    TreeConstructor,                 // 264
    TypePropagation,                 // 265
    TypeRegistrationAction,          // 266
    UnaryOPValue,                    // 267
    UnaryOperatorOPDIV,              // 268
    UnaryOperatorOPMINUS,            // 269
    UnaryOperatorOPMUL,              // 270
    UnaryOperatorOPPLUS,             // 271
    UnaryOperatorRWFR,               // 272
    UnaryOperatorRWINTOP,            // 273
    UnaryOperatorRWIR,               // 274
    UnaryOperatorRWLN,               // 275
    UnaryOperatorRWSM,               // 276
    ValuePropagation,                // 277
    VariableDeclarationAction,       // 278
    ACTION_FINISH_INDEX,             // 279
    EPSILON                          // 280
};

boost::container::flat_map<NonterminalSymbols, std::string>& getNonterminalTypeMapping();

}
}

#endif // NONTERMINALS_H
