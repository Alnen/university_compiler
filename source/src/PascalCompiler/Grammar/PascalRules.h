#ifndef PASCALRULES_H
#define PASCALRULES_H

#include "Parser/Grammar.h"
#include "Nonterminals.h"
#include "Terminals.h"

using namespace PascalCompiler::Grammar;

Parser::Grammar<TokenType, NonterminalSymbols>::RuleList grammar_rules = {
    {Program,{RWPR,ID,SRSM , Program1, TreeConstructor}, TreeConstructor},
    {Program1,{ProcedureFunctions,CompoundStatement,SRSP}, TreeConstructor},
    {Program1,{DescriptionSection1,DescriptionSection,ProcedureFunctions,CompoundStatement,SRSP}, TreeConstructor},
    {DescriptionSection,{EPSILON}, TreeConstructor},
    {DescriptionSection,{DescriptionSection1,DescriptionSection}, TreeConstructor},
    {DescriptionSection1,{LabelSection}, TreeConstructor},
    {DescriptionSection1,{ConstSection}, TreeConstructor},
    {DescriptionSection1,{TypeSection}, TreeConstructor},
    {DescriptionSection1,{VarSection}, TreeConstructor},
    {DescriptionSection1,{OperatorOverloadSection}, TreeConstructor},
    {ProcedureFunctions,{Function,ProcedureFunctions}, TreeConstructor},
    {ProcedureFunctions,{Procedure,ProcedureFunctions}, TreeConstructor},
    {ProcedureFunctions,{EPSILON}, TreeConstructor},
    {LabelSection,{RWLB,Label,LabelSection1,SRSM}, TreeConstructor},
    {LabelSection1,{EPSILON}, TreeConstructor},
    {LabelSection1,{SRCA,Label,LabelSection1}, TreeConstructor},
    {Label,{ID}, TreeConstructor},
    {ConstSection,{RWCN,ConstDefinition,SRSM,ConstSection1}, TreeConstructor},
    {ConstSection1,{EPSILON}, TreeConstructor},
    {ConstSection1,{ConstDefinition,SRSM,ConstSection1}, TreeConstructor},
    {ConstDefinition,{ID,OPEQ,Expression}, TreeConstructor},
    {TypeSection,{RWTP,TypeDefinition,SRSM,TypeSection1}, TreeConstructor},
    {TypeSection1,{EPSILON}, TreeConstructor},
    {TypeSection1,{TypeDefinition,SRSM,TypeSection1}, TreeConstructor},
    {TypeDefinition,{ID,OPEQ,Type}, TreeConstructor},
    {Type,{ConcreteType}, TreeConstructor},
    {Type,{Massive}, TreeConstructor},
    {Type,{EnumType}, TreeConstructor},
    {Type,{ID}, TreeConstructor},
    {ConcreteType,{RWINT}, TreeConstructor},
    {ConcreteType,{RWRAT}, TreeConstructor},
    {ConcreteType,{RWCX}, TreeConstructor},
    {Massive,{RWAR,SRLB,IndexType,Massive1,SRRB,RWOF,Type}, TreeConstructor},
    {Massive1,{EPSILON}, TreeConstructor},
    {Massive1,{SRCA,IndexType,Massive1}, TreeConstructor},
    {IndexType,{EnumType}, TreeConstructor},
    {IndexType,{ID}, TreeConstructor},
    {EnumType,{SRLP,IdList,SRRP}, TreeConstructor},
    {ConstExpr,{UnaryAdditiveOperator,ConstExpr1}, TreeConstructor},
    {ConstExpr,{ConstExpr1}, TreeConstructor},
    {ConstExpr1,{ID}, TreeConstructor},
    {ConstExpr1,{CI,ConstExpr3}, TreeConstructor},
    {ConstExpr1,{SRLCB,Expression,SRCA,Expression,SRRCB}, TreeConstructor},
    {ConstExpr3,{CI,RatianalType2,CJ}, TreeConstructor},
    {ConstExpr3,{SRSP,CI,ConstExpr2}, TreeConstructor},
    {ConstExpr3,{CJ}, TreeConstructor},
    {ConstExpr3,{EPSILON}, TreeConstructor},
    {ConstExpr2,{CJ}, TreeConstructor},
    {ConstExpr2,{EPSILON}, TreeConstructor},
    {RatianalType1,{CI,RatianalType2}, TreeConstructor},
    {RatianalType2,{SRSP,CI}, TreeConstructor},
    {RatianalType2,{EPSILON}, TreeConstructor},
    {VarSection,{RWV,VarSection1,VarSection2}, TreeConstructor},
    {VarSection1,{IdList,SRCN,Type,SRSM}, TreeConstructor},
    {VarSection2,{VarSection1,VarSection2}, TreeConstructor},
    {VarSection2,{EPSILON}, TreeConstructor},
    {IdList,{ID,IdList1}, TreeConstructor},
    {IdList1,{SRCA,ID,IdList1}, TreeConstructor},
    {IdList1,{EPSILON}, TreeConstructor},
    {Expression,{LogicOr}, TreeConstructor},
    {LogicOr,{LogicAnd,LogicOr1}, TreeConstructor},
    {LogicOr1,{RWLO,LogicAnd,LogicOr1}, TreeConstructor},
    {LogicOr1,{EPSILON}, TreeConstructor},
    {LogicAnd,{Relation,LogicAnd1}, TreeConstructor},
    {LogicAnd1,{RWLA,Relation,LogicAnd1}, TreeConstructor},
    {LogicAnd1,{EPSILON}, TreeConstructor},
    {Relation,{Expression1,Relation1}, TreeConstructor},
    {Relation1,{BinaryRelationOperator,Expression1,Relation1}, TreeConstructor},
    {Relation1,{EPSILON}, TreeConstructor},
    {Expression1,{Summand,Expression2}, TreeConstructor},
    {Expression2,{BinaryAdditiveOperator,Summand,Expression2}, TreeConstructor},
    {Expression2,{EPSILON}, TreeConstructor},
    {Summand,{Factor,Factor1,Summand1}, TreeConstructor},
    {Summand1,{BinaryMulOperator,Factor,Factor1,Summand1}, TreeConstructor},
    {Summand1,{EPSILON}, TreeConstructor},
    {Factor1,{RWCM,Factor,Factor1}, TreeConstructor},
    {Factor1,{EPSILON}, TreeConstructor},
    {Factor,{UnaryOperator,Var1}, TreeConstructor},
    {Factor,{Var1}, TreeConstructor},
    {Factor,{SRLP,LogicOr,SRRP}, TreeConstructor},
    {Var1,{ID,Var4}, TreeConstructor},
    {Var1,{CI,Var3}, TreeConstructor},
    {Var1,{SRLCB,RatianalType1,SRCA,RatianalType1,SRRCB}, TreeConstructor},
    {Var3,{SRSP,CI,Var2}, TreeConstructor},
    {Var3,{CJ}, TreeConstructor},
    {Var3,{EPSILON}, TreeConstructor},
    {Var2,{CJ}, TreeConstructor},
    {Var2,{EPSILON}, TreeConstructor},
    {Var4,{EPSILON}, TreeConstructor},
    {Var4,{RightHandPostfixRationalOperator}, TreeConstructor},
    {Var4,{SRLB,Expression,ExprList1,SRRB,RightHandVar1}, TreeConstructor},
    {Var,{ID,ExprList}, TreeConstructor},
    {ExprList,{EPSILON}, TreeConstructor},
    {ExprList,{SRLB,Expression,ExprList1,SRRB}, TreeConstructor},
    {ExprList1,{EPSILON}, TreeConstructor},
    {ExprList1,{SRCA,Expression,ExprList1}, TreeConstructor},
    {LeftHandVar,{Var,LeftHandVar1}, TreeConstructor},
    {LeftHandVar1,{LeftHandPostfixRationalOperator}, TreeConstructor},
    {LeftHandVar1,{EPSILON}, TreeConstructor},
    {RightHandVar,{Var,RightHandVar1}, TreeConstructor},
    {RightHandVar1,{RightHandPostfixRationalOperator}, TreeConstructor},
    {RightHandVar1,{EPSILON}, TreeConstructor},
    {BinaryAdditiveOperator,{OPPLUS}, TreeConstructor},
    {BinaryAdditiveOperator,{OPMINUS}, TreeConstructor},
    {BinaryMulOperator,{OPMUL}, TreeConstructor},
    {BinaryMulOperator,{OPDIV}, TreeConstructor},
    {UnaryOperator,{BinaryAdditiveOperator}, TreeConstructor},
    {UnaryOperator,{UnaryOperator1}, TreeConstructor},
    {UnaryOperator1,{RWINTOP}, TreeConstructor},
    {UnaryOperator1,{RWIR}, TreeConstructor},
    {UnaryOperator1,{RWSM}, TreeConstructor},
    {UnaryOperator1,{RWFR}, TreeConstructor},
    {UnaryOperator1,{RWLN}, TreeConstructor},
    {UnaryOperator1,{RWIM}, TreeConstructor},
    {UnaryOperator1,{RWRE}, TreeConstructor},
    {UnaryAdditiveOperator,{BinaryAdditiveOperator}, TreeConstructor},
    {BinaryRelationOperator,{OPGT}, TreeConstructor},
    {BinaryRelationOperator,{OPLT}, TreeConstructor},
    {BinaryRelationOperator,{OPGE}, TreeConstructor},
    {BinaryRelationOperator,{OPLE}, TreeConstructor},
    {BinaryRelationOperator,{OPEQ}, TreeConstructor},
    {BinaryRelationOperator,{OPNE}, TreeConstructor},
    {PostfixRationalOperator,{SRSP,PostfixRationalOperator1}, TreeConstructor},
    {PostfixRationalOperator1,{RWDN}, TreeConstructor},
    {PostfixRationalOperator1,{RWN}, TreeConstructor},
    {LeftHandPostfixRationalOperator,{PostfixRationalOperator}, TreeConstructor},
    {RightHandPostfixRationalOperator,{PostfixRationalOperator}, TreeConstructor},
    {CompoundStatement,{RWB,Statement,CompoundStatement1}, TreeConstructor},
    {CompoundStatement1,{SRSM,CompoundStatement2}, TreeConstructor},
    {CompoundStatement1,{RWEND}, TreeConstructor},
    {CompoundStatement2,{RWEND}, TreeConstructor},
    {CompoundStatement2,{SRSM,CompoundStatement2}, TreeConstructor},
    {CompoundStatement2,{Statement2,CompoundStatement1}, TreeConstructor},
    {Statement,{EPSILON}, TreeConstructor},
    {Statement,{Statement2}, TreeConstructor},
    {Statement2,{ConditionalOperator}, TreeConstructor},
    {Statement2,{CompoundStatement}, TreeConstructor},
    {Statement2,{InputOperator}, TreeConstructor},
    {Statement2,{OutputOperator}, TreeConstructor},
    {Statement2,{UnconditionalJumpOperator}, TreeConstructor},
    {Statement2,{LoopWithParameterOperator}, TreeConstructor},
    {Statement2,{ID,Statement1}, TreeConstructor},
    {Statement1,{SRCN,Statement}, TreeConstructor},
    {Statement1,{ExprList,LeftHandVar1,OPAS,Expression}, TreeConstructor},
    {LoopWithParameterOperator,{RWFOR,ID,OPAS,Expression,LoopDirection,Expression,RWDO,Statement}, TreeConstructor},
    {LoopDirection,{RWDT}, TreeConstructor},
    {LoopDirection,{RWTO}, TreeConstructor},
    {AssignmentOperator,{LeftHandVar,OPAS,Expression}, TreeConstructor},
    {UnconditionalJumpOperator,{RWGT,Label}, TreeConstructor},
    {ConditionalOperator,{RWIF,Expression,RWTH,ConditionalOperator1}, TreeConstructor},
    {ConditionalOperator1,{RWEL,Statement2}, TreeConstructor},
    {ConditionalOperator1,{Statement2,ConditionalOperator2}, TreeConstructor},
    {ConditionalOperator2,{RWEL,Statement2}, TreeConstructor},
    {ConditionalOperator2,{EPSILON}, TreeConstructor},
    {InputOperator,{RWRD,SRLP,LeftHandVar,InputOperator1,SRRP}, TreeConstructor},
    {InputOperator1,{SRCA,LeftHandVar}, TreeConstructor},
    {OutputOperator,{RWWR,SRLP,Expression,OutputOperator1,SRRP}, TreeConstructor},
    {OutputOperator1,{SRCA,Expression}, TreeConstructor},
    {OperatorOverloadSection,{RWOP,OperatorOverloadSection1}, TreeConstructor},
    {OperatorOverloadSection1,{BinaryAdditiveOperator,SRLP,ID,OperatorOverloadSection2}, TreeConstructor},
    {OperatorOverloadSection1,{OverloadBinaryOperation1,SRLP,ID,BinaryOperatorOverload1,ID,SRCN,Type,SRSM,LocalDefinition1,CompoundStatement,SRSM}, TreeConstructor},
    {OperatorOverloadSection1,{UnaryOperator1,SRLP,ID,SRCN,Type,SRRP,ID,SRCN,Type,SRSM,OperatorOverloadSection1,CompoundStatement,SRSM}, TreeConstructor},
    {OperatorOverloadSection2,{SRCA,ID,SRCN,Type,SRRP,ID,SRCN,Type,SRSM,LocalDefinition1,CompoundStatement,SRSM}, TreeConstructor},
    {OperatorOverloadSection2,{SRCN,Type,OperatorOverloadSection3}, TreeConstructor},
    {OperatorOverloadSection3,{SRSM,ID,SRCN,Type,SRRP,ID,SRCN,Type,SRSM,LocalDefinition1,CompoundStatement,SRSM}, TreeConstructor},
    {OperatorOverloadSection3,{SRRP,ID,SRCN,Type,SRSM,OperatorOverloadSection1,CompoundStatement,SRSM}, TreeConstructor},
    {LocalDefinition1,{EPSILON}, TreeConstructor},
    {LocalDefinition1,{LocalDefinition,OperatorOverloadSection1}, TreeConstructor},
    {LocalDefinition,{TypeSection}, TreeConstructor},
    {LocalDefinition,{VarSection}, TreeConstructor},
    {LocalDefinition,{ConstSection}, TreeConstructor},
    {LocalDefinition,{LabelSection}, TreeConstructor},
    {UnaryOperatorOverload,{UnaryOperator,SRLP,ID,SRCN,Type,SRRP}, TreeConstructor},
    {BinaryOperatorOverload,{OverloadBinaryOperation,SRLP,ID,BinaryOperatorOverload1}, TreeConstructor},
    {BinaryOperatorOverload1,{SRCA,ID,SRCN,Type,SRRP}, TreeConstructor},
    {BinaryOperatorOverload1,{SRCN,Type,SRSM,ID,SRCN,Type,SRRP}, TreeConstructor},
    {OverloadBinaryOperation,{BinaryAdditiveOperator}, TreeConstructor},
    {OverloadBinaryOperation,{OverloadBinaryOperation1}, TreeConstructor},
    {OverloadBinaryOperation1,{BinaryMulOperator}, TreeConstructor},
    {OverloadBinaryOperation1,{RWLO}, TreeConstructor},
    {OverloadBinaryOperation1,{RWLA}, TreeConstructor},
    {OverloadBinaryOperation1,{OPAS}, TreeConstructor},
    {OverloadBinaryOperation1,{RWCM}, TreeConstructor},
    {Function,{RWFUN,ID,SRLP,FunctionArgs,SRRP,SRCN,Type,SRSM,LocalDefinition1,CompoundStatement,SRSM}, TreeConstructor},
    {FunctionArgs,{OneTypeArgs,FunctionArgs1}, TreeConstructor},
    {FunctionArgs1,{SRSM,FunctionArgs}, TreeConstructor},
    {FunctionArgs1,{EPSILON}, TreeConstructor},
    {OneTypeArgs,{ID,OneTypeArgs1}, TreeConstructor},
    {OneTypeArgs1,{SRCA,ID,IdList1,SRCN,Type}, TreeConstructor},
    {OneTypeArgs1,{SRCN,Type}, TreeConstructor},
    {Procedure,{RWPRC,ID,SRLP,FunctionArgs,ResultArgs,SRRP,SRCN,Type,SRSM,LocalDefinition1,CompoundStatement,SRSM}, TreeConstructor},
    {ResultArgs,{EPSILON}, TreeConstructor},
    {ResultArgs,{SRSM,RWV,FunctionArgs}, TreeConstructor}
};

#endif // #define PASCALRULES_H
