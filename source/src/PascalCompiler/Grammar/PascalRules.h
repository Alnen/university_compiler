#ifndef PASCALRULES_H
#define PASCALRULES_H

#include "Parser/Grammar.h"
#include "Nonterminals.h"
#include "Terminals.h"

using namespace PascalCompiler::Grammar;

Parser::Grammar<TokenType, NonterminalSymbols>::RuleList grammar_rules = {
    {Program,{RWPR,ID,SRSM , Program1}, TreeConstructor},
    {Program1,{ProcedureFunctions,CompoundStatement,SRSP}, FinishMainFuntion},
    {Program1,{DescriptionSection1,DescriptionSection,ProcedureFunctions,CompoundStatement,SRSP}, FinishMainFuntion},
    {DescriptionSection,{EPSILON}, TreeConstructor},
    {DescriptionSection,{DescriptionSection1,DescriptionSection}, TreeConstructor},
    {DescriptionSection1,{LabelSection}, TreeConstructor},
    {DescriptionSection1,{ConstSection}, TreeConstructor},
    {DescriptionSection1,{TypeSection}, TreeConstructor},
    {DescriptionSection1,{VarSection}, TreeConstructor},
    {DescriptionSection1,{OperatorOverloadSection}, TreeConstructor},
// NEW FUNCTIONS
    {ProcedureFunctions,{Function,ProcedureFunctions}, TreeConstructor},
    {ProcedureFunctions,{Procedure,ProcedureFunctions}, TreeConstructor},
    {ProcedureFunctions,{EPSILON}, TreeConstructor},
// LABEL DONE
    {LabelSection,{RWLB,Label,LabelSection1,SRSM}, LabelRegistration},
    {LabelSection1,{EPSILON}, TreeConstructor},
    {LabelSection1,{SRCA,Label,LabelSection1}, LabelRegistration},
    {Label,{ID}, LabelID},
// CONST SECTION NOT SUPPORTED
    {ConstSection,{RWCN,ConstDefinition,SRSM,ConstSection1}, TreeConstructor},
    {ConstSection1,{EPSILON}, TreeConstructor},
    {ConstSection1,{ConstDefinition,SRSM,ConstSection1}, TreeConstructor},
    {ConstDefinition,{ID,OPEQ,Expression}, TreeConstructor},
// TYPE DONE
    {TypeSection,{RWTP,TypeDefinition,SRSM,TypeSection1}, TreeConstructor},
    {TypeSection1,{EPSILON}, TreeConstructor},
    {TypeSection1,{TypeDefinition,SRSM,TypeSection1}, TreeConstructor},
    {TypeDefinition,{ID,OPEQ,Type}, TypeRegistrationAction},
    {Type,{ConcreteType}, TypePropagation},
    {Type,{Massive}, TypePropagation},
    {Type,{EnumType}, TypePropagation},
    {Type,{ID}, GetTypeAccordingToID},
    {FinalType,{ConcreteType}, TypePropagation},
    {FinalType,{ID}, GetTypeAccordingToID},
    {ConcreteType,{RWINT}, IntegerPass},
    {ConcreteType,{RWRAT}, RationalPass},
    {ConcreteType,{RWCX}, ComplexPass},
    {Massive,{RWAR,SRLB,IndexType,Massive1,SRRB,RWOF,FinalType}, ArrayCreationAction},
    {Massive1,{EPSILON}, Massive1InitVec},
    {Massive1,{SRCA,IndexType,Massive1}, Massive1AppendAtStart},
    {IndexType,{CI}, IndexTypeCXSize},
    {IndexType,{ID}, IndexTypeIDCase},
    {EnumType,{SRLP,IdList,SRRP}, EnumTypeConstruction},
// CONST
    {ConstExpr,{UnaryAdditiveOperator,ConstExpr1}, TreeConstructor},
    {ConstExpr,{ConstExpr1}, TreeConstructor},
    {ConstExpr1,{ID}, TreeConstructor},
    {ConstExpr1,{CI,ConstExpr3}, TreeConstructor},
    {ConstExpr1,{SRLCB,Expression,SRCA,Expression,SRRCB}, TreeConstructor},
    {ConstExpr3,{CI,RatianalType2,CJ}, TreeConstructor},
    {ConstExpr3,{SRSP,CI,ConstExpr2}, TreeConstructor},
    {ConstExpr3,{CJ}, TreeConstructor},
    {ConstExpr3,{EPSILON}, TreeConstructor},
    {ConstExpr2,{CJ}, TreeConstructor},
    {ConstExpr2,{EPSILON}, TreeConstructor},
    {RatianalType1,{CI,RatianalType2}, RationalStart},
    {RatianalType2,{SRSP,CI}, RationalEnd},
    {RatianalType2,{EPSILON}, TreeConstructor},
// VAR DONE
    {VarSection,{RWV,VarSection1,VarSection2}, TreeConstructor},
    {VarSection1,{IdList,SRCN,Type,SRSM}, VariableDeclarationAction},
    {VarSection2,{VarSection1,VarSection2}, TreeConstructor},
    {VarSection2,{EPSILON}, TreeConstructor},
// ID LIST DONE
    {IdList,{ID,IdList1}, FinalAppendList},
    {IdList1,{SRCA,ID,IdList1}, AppendIdList},
    {IdList1,{EPSILON}, InitIdList},
// EXPRESSION
    {Expression,{LogicOr}, ValuePropagation},
    {LogicOr,{LogicAnd,LogicOr1}, ExpressionCombiner},
    {LogicOr1,{BinaryLogicOperatorOr,LogicAnd,LogicOr1}, SuperExpressionCombiner},
    {LogicOr1,{EPSILON}, TreeConstructor},
    {LogicAnd,{Relation,LogicAnd1}, ExpressionCombiner},
    {LogicAnd1,{BinaryLogicOperatorAnd,Relation,LogicAnd1}, SuperExpressionCombiner},
    {LogicAnd1,{EPSILON}, TreeConstructor},
    {Relation,{Expression1,Relation1}, ExpressionCombiner},
    {Relation1,{BinaryRelationOperator,Expression1,Relation1}, SuperExpressionCombiner},
    {Relation1,{EPSILON}, TreeConstructor},
    {Expression1,{Summand,Expression2}, ExpressionCombiner},
    {Expression2,{BinaryAdditiveOperator,Summand,Expression2}, SuperExpressionCombiner},
    {Expression2,{EPSILON}, TreeConstructor},
    {Summand,{Factor1,Summand1}, ExpressionCombiner},
    {Summand1,{BinaryMulOperator,Factor1,Summand1}, SuperExpressionCombiner},
    {Summand1,{EPSILON}, TreeConstructor},
    {Factor1,{Factor,Factor2}, ExpressionCombiner},
    {Factor2,{RWCM,Factor,Factor2}, SuperExpressionCombiner},
    {Factor2,{EPSILON}, TreeConstructor},
    {Factor,{UnaryOperator,Var1}, UnaryOPValue},
    {Factor,{Var1}, ValuePropagation},
    {Factor,{SRLP,LogicOr,SRRP}, BracketValuePropagation},
    {Var1,{RightHandVar}, ValuePropagation},
    {Var1,{CI,Var3}, CreateConstComplex1},
    {Var1,{SRLCB,RatianalType1,SRCA,RatianalType1,SRRCB}, CreateConstComplex3},
    {Var3,{SRSP,CI,Var2}, CreateConstComplex2},
    {Var3,{CJ}, JFlagTrue},
    {Var3,{EPSILON}, JFlagFalse},
    {Var2,{CJ}, JFlagTrue},
    {Var2,{EPSILON}, JFlagFalse},
    {ExprList,{Expression,ExprList1}, FinalAppendExprList},
    {ExprList1,{EPSILON}, InitExprList},
    {ExprList1,{SRCA,Expression,ExprList1}, AppendExprList},
    {LeftHandVar,{ID,VarHandlerList}, PropagateLeftHandVarInfo},
    //{LeftHandVar3,{LeftHandVar1}, TreeConstructor},
    //{LeftHandVar3,{SRLB, ExprList, SRRB, LeftHandVar1}, TreeConstructor},
    //{LeftHandVar1,{EPSILON}, TreeConstructor},
    //{LeftHandVar1,{LeftHandPostfixRationalOperator}, OPPropagation},
    {VarHandlerList,{SRLB, Expression, SRRB, VarHandlerList}, AppendIndexVarHandlerList},
    {VarHandlerList,{SRSP, ID, VarHandlerList}, AppendMemberVarHandlerList},
    {VarHandlerList,{EPSILON},                InitVarHandlerList},
    {RightHandVar,{ID,VarHandlerList}, LoadRightHandVar},
    //{RightHandVar3,{RightHandVar1}, LoadRightHandVar2},
    //{RightHandVar3,{SRLB, ExprList, SRRB, RightHandVar1}, LoadRightHandVar3},
    //{RightHandVar1,{RightHandPostfixRationalOperator}, OPPropagation},
    //{RightHandVar1,{EPSILON}, LoadRightHandVar4},
    {BinaryAdditiveOperator,{OPPLUS}, UnaryOperatorOPPLUS},
    {BinaryAdditiveOperator,{OPMINUS}, UnaryOperatorOPMINUS},
    {BinaryMulOperator,{OPMUL}, UnaryOperatorOPMUL},
    {BinaryMulOperator,{OPDIV}, UnaryOperatorOPDIV},
    {UnaryOperator,{BinaryAdditiveOperator}, OPPropagation},
    {UnaryOperator,{UnaryOperator1}, OPPropagation},
    {UnaryOperator1,{RWINTOP}, UnaryOperatorRWINTOP},
    {UnaryOperator1,{RWIR}, UnaryOperatorRWIR},
    {UnaryOperator1,{RWSM}, UnaryOperatorRWSM},
    {UnaryOperator1,{RWFR}, UnaryOperatorRWFR},
    {UnaryOperator1,{RWLN}, UnaryOperatorRWLN},
    {UnaryOperator1,{RWIM}, UnaryOperatorRWIM},
    {UnaryOperator1,{RWRE}, UnaryOperatorRWRE},
    {UnaryAdditiveOperator,{BinaryAdditiveOperator}, OPPropagation},
    {BinaryRelationOperator,{OPGT}, BinaryRelationOperatorOPGT},
    {BinaryRelationOperator,{OPLT}, BinaryRelationOperatorOPLT},
    {BinaryRelationOperator,{OPGE}, BinaryRelationOperatorOPGE},
    {BinaryRelationOperator,{OPLE}, BinaryRelationOperatorOPLE},
    {BinaryRelationOperator,{OPEQ}, BinaryRelationOperatorOPEQ},
    {BinaryRelationOperator,{OPNE}, BinaryRelationOperatorOPNE},
    {BinaryLogicOperatorAnd,{RWLA}, BinaryLogicOperatorRWLA},
    {BinaryLogicOperatorOr,{RWLO}, BinaryLogicOperatorRWLO},
    {PostfixRationalOperator,{SRSP,PostfixRationalOperator1}, PostfixRationalOperatorRWDNN},
    {PostfixRationalOperator1,{RWDN}, PostfixRationalOperatorRWDN},
    {PostfixRationalOperator1,{RWN}, PostfixRationalOperatorRWN},
    {LeftHandPostfixRationalOperator,{PostfixRationalOperator}, OPPropagation},
    {RightHandPostfixRationalOperator,{PostfixRationalOperator}, OPPropagation},
// STATEMENT
    {CompoundStatement,{RWB,Statement,CompoundStatement1}, TreeConstructor},
    {CompoundStatement1,{SRSM,CompoundStatement2}, TreeConstructor},
    {CompoundStatement1,{RWEND}, TreeConstructor},
    {CompoundStatement2,{RWEND}, TreeConstructor},
    {CompoundStatement2,{SRSM,CompoundStatement2}, TreeConstructor},
    {CompoundStatement2,{Statement2,CompoundStatement1}, TreeConstructor},
    {Statement,{EPSILON}, TreeConstructor},
    {Statement,{Statement2}, TreeConstructor},
    {Statement2,{ConditionalOperator}, TreeConstructor},
    {Statement2,{CompoundStatement}, TreeConstructor},
    {Statement2,{InputOperator}, TreeConstructor},
    {Statement2,{OutputOperator}, TreeConstructor},
    {Statement2,{UnconditionalJumpOperator}, TreeConstructor},
    {Statement2,{LoopWithParameterOperator}, TreeConstructor},
    {Statement2,{ID, IDPass, Statement1}, LabelOrAssignmentAction},
    {Statement45,{EPSILON}, LabelStatement},
    {Statement1,{IDPass2, Statement45, SRCN, Statement}, LabelAction},
    {Statement1,{VarHandlerList,OPAS,Expression}, AssignmentAction},
    {LoopWithParameterOperator,{RWFOR,ID,OPAS,Expression,LoopDirection,Expression,RWDO, CreateBlock, Statement}, LoopWithParameterAction},
    {LoopDirection,{RWDT}, LoopDirectionDT},
    {LoopDirection,{RWTO}, LoopDirectionTO},
    {UnconditionalJumpOperator,{RWGT,Label}, GotoLabel},
    {ConditionalOperator,{RWIF,Expression,RWTH, CreateBlock, Statement2,ConditionalOperator1}, ConditionalOperatorAction},
    {ConditionalOperator1,{EPSILON}, ConditionalOperatorNoElseAction},
    {ConditionalOperator1,{RWEL, CreateBlock, Statement2}, ConditionalOperatorElseAction},
    {InputOperator,{RWRD,SRLP,LeftHandVar,SRRP}, ReadLeftHandVarAction},
    {OutputOperator,{RWWR, SRLP, TEXT, ExprList1,SRRP}, PrintOperatorMain},
    //{OutputOperator1,{SRCA,Expression}, TreeConstructor},
    {CreateBlock, {EPSILON}, CreateBlockAction},
// OPERATOR OVERLOADING AND FUNCTION DEFINITION
    {OperatorOverloadSection,{RWOP,OperatorOverloadSection1}, TreeConstructor},
    {OperatorOverloadSection1,{BinaryAdditiveOperator,SRLP,ID,OperatorOverloadSection2}, TreeConstructor},
    {OperatorOverloadSection1,{OverloadBinaryOperation1,SRLP,ID,BinaryOperatorOverload1,ID,SRCN,Type,SRSM,LocalDefinition1,CompoundStatement,SRSM}, TreeConstructor},
    {OperatorOverloadSection1,{UnaryOperator1,SRLP,ID,SRCN,Type,SRRP,ID,SRCN,Type,SRSM,OperatorOverloadSection1,CompoundStatement,SRSM}, TreeConstructor},
    {OperatorOverloadSection2,{SRCA,ID,SRCN,Type,SRRP,ID,SRCN,Type,SRSM,LocalDefinition1,CompoundStatement,SRSM}, TreeConstructor},
    {OperatorOverloadSection2,{SRCN,Type,OperatorOverloadSection3}, TreeConstructor},
    {OperatorOverloadSection3,{SRSM,ID,SRCN,Type,SRRP,ID,SRCN,Type,SRSM,LocalDefinition1,CompoundStatement,SRSM}, TreeConstructor},
    {OperatorOverloadSection3,{SRRP,ID,SRCN,Type,SRSM,OperatorOverloadSection1,CompoundStatement,SRSM}, TreeConstructor},
    {LocalDefinition1,{EPSILON}, TreeConstructor},
    {LocalDefinition1,{LocalDefinition,OperatorOverloadSection1}, TreeConstructor},
    {LocalDefinition,{TypeSection}, TreeConstructor},
    {LocalDefinition,{VarSection}, TreeConstructor},
    {LocalDefinition,{ConstSection}, TreeConstructor},
    {LocalDefinition,{LabelSection}, TreeConstructor},
    {UnaryOperatorOverload,{UnaryOperator,SRLP,ID,SRCN,Type,SRRP}, TreeConstructor},
    {BinaryOperatorOverload,{OverloadBinaryOperation,SRLP,ID,BinaryOperatorOverload1}, TreeConstructor},
    {BinaryOperatorOverload1,{SRCA,ID,SRCN,Type,SRRP}, TreeConstructor},
    {BinaryOperatorOverload1,{SRCN,Type,SRSM,ID,SRCN,Type,SRRP}, TreeConstructor},
    {OverloadBinaryOperation,{BinaryAdditiveOperator}, TreeConstructor},
    {OverloadBinaryOperation,{OverloadBinaryOperation1}, TreeConstructor},
    {OverloadBinaryOperation1,{BinaryMulOperator}, TreeConstructor},
    {OverloadBinaryOperation1,{RWLO}, TreeConstructor},
    {OverloadBinaryOperation1,{RWLA}, TreeConstructor},
    {OverloadBinaryOperation1,{OPAS}, TreeConstructor},
    {OverloadBinaryOperation1,{RWCM}, TreeConstructor},
    {Function,{RWFUN,ID,SRLP,FunctionArgs,SRRP,SRCN,Type,SRSM,LocalDefinition1,CompoundStatement,SRSM}, TreeConstructor},
    {FunctionArgs,{OneTypeArgs,FunctionArgs1}, TreeConstructor},
    {FunctionArgs1,{SRSM,FunctionArgs}, TreeConstructor},
    {FunctionArgs1,{EPSILON}, TreeConstructor},
    {OneTypeArgs,{ID,OneTypeArgs1}, TreeConstructor},
    {OneTypeArgs1,{SRCA,ID,IdList1,SRCN,Type}, TreeConstructor},
    {OneTypeArgs1,{SRCN,Type}, TreeConstructor},
    {Procedure,{RWPRC,ID,SRLP,FunctionArgs,ResultArgs,SRRP,SRCN,Type,SRSM,LocalDefinition1,CompoundStatement,SRSM}, TreeConstructor},
    {ResultArgs,{EPSILON}, TreeConstructor},
    {ResultArgs,{SRSM,RWV,FunctionArgs}, TreeConstructor}
};

#endif // #define PASCALRULES_H
