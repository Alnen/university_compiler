#pragma once

namespace Grammar
{

enum SpecialSymbols { EPSILON = 0, FINAL_STATE_SYMBOL };
enum TerminalSymbols {
	TERMINAL_START_INDEX = 9,
	CI, // 10
	CJ, // 11
	ID, // 12
	OPAS, // 13
	OPDIV, // 14
	OPEQ, // 15
	OPGE, // 16
	OPGT, // 17
	OPLE, // 18
	OPLT, // 19
	OPMINUS, // 20
	OPMUL, // 21
	OPNE, // 22
	OPPLUS, // 23
	RWAR, // 24
	RWB, // 25
	RWCM, // 26
	RWCN, // 27
	RWCX, // 28
	RWDN, // 29
	RWDO, // 30
	RWDT, // 31
	RWEL, // 32
	RWEND, // 33
	RWFOR, // 34
	RWFR, // 35
	RWFUN, // 36
	RWGT, // 37
	RWIF, // 38
	RWIM, // 39
	RWINT, // 40
	RWINTOP, // 41
	RWIR, // 42
	RWLA, // 43
	RWLB, // 44
	RWLN, // 45
	RWLO, // 46
	RWN, // 47
	RWOF, // 48
	RWOP, // 49
	RWPR, // 50
	RWPRC, // 51
	RWRAT, // 52
	RWRD, // 53
	RWRE, // 54
	RWSM, // 55
	RWTH, // 56
	RWTO, // 57
	RWTP, // 58
	RWV, // 59
	RWWR, // 60
	SRCA, // 61
	SRCN, // 62
	SRLB, // 63
	SRLCB, // 64
	SRLP, // 65
	SRRB, // 66
	SRRCB, // 67
	SRRP, // 68
	SRSM, // 69
	SRSP, // 70
	TERMINAL_FINISH_INDEX
};

enum NonterminalSymbols {
	NONTERMINAL_START_INDEX = 99,
	AssignmentOperator, // 100
	BinaryAdditiveOperator, // 101
	BinaryMulOperator, // 102
	BinaryOperatorOverload, // 103
	BinaryOperatorOverload1, // 104
	BinaryRelationOperator, // 105
	CompoundStatement, // 106
	CompoundStatement1, // 107
	CompoundStatement2, // 108
	ConcreteType, // 109
	ConditionalOperator, // 110
	ConditionalOperator1, // 111
	ConditionalOperator2, // 112
	ConstDefinition, // 113
	ConstExpr, // 114
	ConstExpr1, // 115
	ConstExpr2, // 116
	ConstSection, // 117
	ConstSection1, // 118
	DescriptionSection, // 119
	DescriptionSection1, // 120
	EnumType, // 121
	ExprList, // 122
	ExprList1, // 123
	Expression, // 124
	Expression1, // 125
	Expression2, // 126
	Factor, // 127
	Factor1, // 128
	Function, // 129
	FunctionArgs, // 130
	FunctionArgs1, // 131
	IdList, // 132
	IdList1, // 133
	IndexType, // 134
	InputOperator, // 135
	InputOperator1, // 136
	Label, // 137
	LabelSection, // 138
	LabelSection1, // 139
	LeftHandPostfixRationalOperator, // 140
	LeftHandVar, // 141
	LeftHandVar1, // 142
	LocalDefinition, // 143
	LocalDefinition1, // 144
	LogicAnd, // 145
	LogicAnd1, // 146
	LogicOr, // 147
	LogicOr1, // 148
	LoopDirection, // 149
	LoopWithParameterOperator, // 150
	Massive, // 151
	Massive1, // 152
	OneTypeArgs, // 153
	OneTypeArgs1, // 154
	OperatorOverloadSection, // 155
	OperatorOverloadSection1, // 156
	OperatorOverloadSection2, // 157
	OperatorOverloadSection3, // 158
	OutputOperator, // 159
	OutputOperator1, // 160
	OverloadBinaryOperation, // 161
	OverloadBinaryOperation1, // 162
	PostfixRationalOperator, // 163
	PostfixRationalOperator1, // 164
	Procedure, // 165
	ProcedureFunctions, // 166
	Program, // 167
	Program1, // 168
	RatianalType, // 169
	RatianalType1, // 170
	RatianalType2, // 171
	Relation, // 172
	Relation1, // 173
	ResultArgs, // 174
	RightHandPostfixRationalOperator, // 175
	RightHandVar, // 176
	RightHandVar1, // 177
	Statement, // 178
	Statement1, // 179
	Statement2, // 180
	Summand, // 181
	Summand1, // 182
	Type, // 183
	TypeDefinition, // 184
	TypeSection, // 185
	TypeSection1, // 186
	UnaryAdditiveOperator, // 187
	UnaryOperator, // 188
	UnaryOperator1, // 189
	UnaryOperatorOverload, // 190
	UnconditionalJumpOperator, // 191
	Var, // 192
	Var1, // 193
	Var2, // 194
	VarSection, // 195
	VarSection1, // 196
	VarSection2, // 197
	NONTERMINAL_FINISH_INDEX
};

} // namespace Grammar

