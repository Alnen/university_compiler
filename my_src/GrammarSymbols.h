#pragma once

namespace Grammar
{

enum SpecialSymbols { EPSILON = 0, FINAL_STATE_SYMBOL };
enum TerminalSymbols {
	TERMINAL_START_INDEX = 9,
	CI, // 10
	CR, // 11
	CX, // 12
	ID, // 13
	OPAS, // 14
	OPDIV, // 15
	OPEQ, // 16
	OPGE, // 17
	OPGT, // 18
	OPLE, // 19
	OPLT, // 20
	OPMINUS, // 21
	OPMUL, // 22
	OPNE, // 23
	OPPLUS, // 24
	RWAR, // 25
	RWB, // 26
	RWCM, // 27
	RWCN, // 28
	RWCX, // 29
	RWDN, // 30
	RWDO, // 31
	RWDT, // 32
	RWEL, // 33
	RWEND, // 34
	RWFOR, // 35
	RWFR, // 36
	RWFUN, // 37
	RWGT, // 38
	RWIF, // 39
	RWIM, // 40
	RWINT, // 41
	RWINTOP, // 42
	RWIR, // 43
	RWLA, // 44
	RWLB, // 45
	RWLN, // 46
	RWLO, // 47
	RWN, // 48
	RWOF, // 49
	RWOP, // 50
	RWPR, // 51
	RWPRC, // 52
	RWRAT, // 53
	RWRD, // 54
	RWRE, // 55
	RWSM, // 56
	RWTH, // 57
	RWTO, // 58
	RWTP, // 59
	RWV, // 60
	RWWR, // 61
	SRCA, // 62
	SRCN, // 63
	SRLB, // 64
	SRLP, // 65
	SRRB, // 66
	SRRP, // 67
	SRSM, // 68
	SRSP, // 69
	TERMINAL_FINISH_INDEX
};

enum NonterminalSymbols {
	NONTERMINAL_START_INDEX = 99,
	AssignmentOperator, // 100
	BinaryAdditiveOperator, // 101
	BinaryMulOperator, // 102
	BinaryOperatorOverload, // 103
	BinaryOperatorOverload1, // 104
	BinaryRelationOperator, // 105
	CompoundStatement, // 106
	CompoundStatement1, // 107
	CompoundStatement2, // 108
	ConcreteType, // 109
	ConditionalOperator, // 110
	ConditionalOperator1, // 111
	ConditionalOperator2, // 112
	ConstDefinition, // 113
	ConstExpr, // 114
	ConstExpr1, // 115
	ConstSection, // 116
	ConstSection1, // 117
	DescriptionSection, // 118
	DescriptionSection1, // 119
	EnumType, // 120
	ExprList, // 121
	ExprList1, // 122
	Expression, // 123
	Expression1, // 124
	Expression2, // 125
	Factor, // 126
	Factor1, // 127
	Function, // 128
	FunctionArgs, // 129
	FunctionArgs1, // 130
	IdList, // 131
	IdList1, // 132
	IndexType, // 133
	InputOperator, // 134
	InputOperator1, // 135
	Label, // 136
	LabelSection, // 137
	LabelSection1, // 138
	LeftHandPostfixRationalOperator, // 139
	LeftHandVar, // 140
	LeftHandVar1, // 141
	LocalDefinition, // 142
	LocalDefinition1, // 143
	LogicAnd, // 144
	LogicAnd1, // 145
	LogicOr, // 146
	LogicOr1, // 147
	LoopDirection, // 148
	LoopWithParameterOperator, // 149
	Massive, // 150
	Massive1, // 151
	OneTypeArgs, // 152
	OneTypeArgs1, // 153
	OperatorOverloadSection, // 154
	OperatorOverloadSection1, // 155
	OperatorOverloadSection2, // 156
	OperatorOverloadSection3, // 157
	OutputOperator, // 158
	OutputOperator1, // 159
	OverloadBinaryOperation, // 160
	OverloadBinaryOperation1, // 161
	PostfixRationalOperator, // 162
	PostfixRationalOperator1, // 163
	Procedure, // 164
	ProcedureFunctions, // 165
	Program, // 166
	Program1, // 167
	Relation, // 168
	Relation1, // 169
	ResultArgs, // 170
	RightHandPostfixRationalOperator, // 171
	RightHandVar, // 172
	RightHandVar1, // 173
	Statement, // 174
	Statement1, // 175
	Statement2, // 176
	Summand, // 177
	Summand1, // 178
	Type, // 179
	TypeDefinition, // 180
	TypeSection, // 181
	TypeSection1, // 182
	UnaryAdditiveOperator, // 183
	UnaryOperator, // 184
	UnaryOperator1, // 185
	UnaryOperatorOverload, // 186
	UnconditionalJumpOperator, // 187
	Var, // 188
	Var1, // 189
	VarSection, // 190
	VarSection1, // 191
	VarSection2, // 192
	NONTERMINAL_FINISH_INDEX
};

} // namespace Grammar

